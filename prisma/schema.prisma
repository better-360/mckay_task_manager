// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assignedTasks Task[]     @relation("AssignedTasks")
  createdTasks  Task[]     @relation("CreatedTasks")
  taskNotes     TaskNote[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  ADMIN
  USER
}

model Customer {
  id          String         @id @default(cuid())
  name        String
  description String?
  files       CustomerFile[]
  tasks       Task[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("customers")
}

model CustomerFile {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  filename   String
  url        String
  uploadedAt DateTime @default(now())

  @@map("customer_files")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      String       @default("PENDING")
  assigneeId  String?
  assignee    User?        @relation("AssignedTasks", fields: [assigneeId], references: [id])
  customerId  String
  customer    Customer     @relation(fields: [customerId], references: [id])
  createdById String
  createdBy   User         @relation("CreatedTasks", fields: [createdById], references: [id])
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  notes       TaskNote[]
  tags        TaskTag[]
  attachments Attachment[]

  @@map("tasks")
}

model TaskNote {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())

  @@map("task_notes")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  color String
  tasks TaskTag[]

  @@map("tags")
}

model TaskTag {
  taskId String
  tagId  String
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}

model Attachment {
  id         String   @id @default(cuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  filename   String
  url        String
  uploadedAt DateTime @default(now())

  @@map("attachments")
} 
