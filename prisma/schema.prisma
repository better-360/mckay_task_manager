generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profilePicture String?
  phoneNumber   String?
  

  // Relations
  assignedTasks Task[]     @relation("AssignedTasks")
  createdTasks  Task[]     @relation("CreatedTasks")
  taskNotes     TaskNote[]
  accounts      Account[]
  sessions      Session[]
  userSkills    UserSkill[]
  activities    TaskActivity[] @relation("ActivityActor")

  @@map("users")
}

model Account {
  id              String            @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  id              String            @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


model Customer {
  id              String            @id @default(uuid()) @db.Uuid
  name        String
  description String?
  files       CustomerFile[]
  tasks       Task[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("customers")
}

model CustomerFile {
  id              String            @id @default(uuid()) @db.Uuid
  customerId String   @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  filename   String
  url        String
  uploadedAt DateTime @default(now())

  @@map("customer_files")
}

model Task {
  id              String            @id @default(uuid()) @db.Uuid
  title       String
  description Json?        // Rich text içerik için JSON formatında
  status      TaskStatus  @default(PENDING)
  assigneeId  String?      @db.Uuid
  assignee    User?        @relation("AssignedTasks", fields: [assigneeId], references: [id])
  customerId  String       @db.Uuid
  customer    Customer     @relation(fields: [customerId], references: [id])
  createdById String       @db.Uuid
  createdBy   User         @relation("CreatedTasks", fields: [createdById], references: [id])
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  notes       TaskNote[]
  tags        TaskTag[]
  attachments Attachment[]
  activities  TaskActivity[]

  @@map("tasks")
}

model TaskNote {
  id              String            @id @default(uuid()) @db.Uuid
  taskId    String   @db.Uuid
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  content   String   // String formatında basit text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attachments Attachment[] // Notlara da dosya eklenebilsin

  @@map("task_notes")
}

model TaskActivity {
  id              String            @id @default(uuid()) @db.Uuid
  taskId      String       @db.Uuid
  task        Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  actorId     String       @db.Uuid
  actor       User         @relation("ActivityActor", fields: [actorId], references: [id])
  type        ActivityType
  metadata    Json?        // Değişiklik detayları için (eski/yeni değerler)
  createdAt   DateTime     @default(now())

  @@map("task_activities")
}

model Tag {
  id    String    @db.Uuid @id @default(uuid())
  name  String    @unique
  color String
  tasks TaskTag[]

  @@map("tags")
}

model TaskTag {
  taskId String @db.Uuid
  tagId  String @db.Uuid
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}

model Attachment {
  id              String            @id @default(uuid()) @db.Uuid
  taskId     String?   @db.Uuid
  task       Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  noteId     String?   @db.Uuid
  note       TaskNote? @relation(fields: [noteId], references: [id], onDelete: Cascade)
  filename   String
  url        String
  mimeType   String    // Dosya türü için
  size       Int       // Byte cinsinden boyut
  uploadedAt DateTime  @default(now())

  @@map("attachments")
}

model Skill {
  id              String            @id @default(uuid()) @db.Uuid
  name        String      @unique
  category    String      // Örn: "Programming", "Language", "Tool"
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userSkills  UserSkill[]

  @@map("skills")
}

model UserSkill {
  id              String            @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  skillId     String   @db.Uuid
  level       Int      // 1-5 arası bir değer
  yearsOfExp  Float?   // Deneyim yılı
  description String?  // Kişisel notlar veya açıklamalar
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  STATUS_CHANGED
  ASSIGNEE_CHANGED
  TAG_ADDED
  TAG_REMOVED
  NOTE_ADDED
  NOTE_UPDATED
  NOTE_DELETED
  ATTACHMENT_ADDED
  ATTACHMENT_REMOVED
  DUE_DATE_CHANGED
}